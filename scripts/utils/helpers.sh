#!/bin/bash

pluralize() {
  local word="$1"

  if [[ "$word" =~ [aeiouAEIOU]y$ ]]; then
    echo "${word%y}ies"
  else
    if [[ "$word" =~ [zs]$ ]]; then
      echo "${word}"
    else
      echo "${word}s"
    fi
  fi
}

to_snake_case() {
  echo "$1" | grep -E '^[a-z_]+$' >/dev/null
}

singularize() {
  local word="$1"

  case "$word" in
    *'s')
      echo "${word%"s"}"
      ;;
    *'ies')
      echo "${word%"ies"}y"
      ;;
    *)
      echo "$word"
      ;;
  esac
}

make_lowercase(){
  lowercased_value=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  echo "$lowercased_value"
}

make_uppercase(){
  uppercased_value=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  echo "$uppercased_value"
}

make_first_lowercase() {
  local input_string="$1"

  if [ -n "$input_string" ]; then
    local first_char="$(echo "${input_string:0:1}" | tr '[:upper:]' '[:lower:]')"
    local modified_string="$first_char${input_string:1}"
    echo "$modified_string"
  else
    echo ""
  fi
}

snake_case_to_kebab_case() {
  local input_string="$1"

  if [ -n "$input_string" ]; then
    local kebab_case_string=$(echo "$input_string" | tr '_' '-')

    echo "$kebab_case_string" | tr '[:upper:]' '[:lower:]'
  else
    echo ""
  fi
}

snake_case_to_camelCase() {
  local input_string="$1"

  if [ -n "$input_string" ]; then
    local camel_case_string=$(echo "$input_string" | awk -F_ '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1' | tr -d ' ')
    echo "$camel_case_string"
  else
    echo ""
  fi
}

delete_duplicates_in_directory() {
  local directory="$1"
  local given_file="$2"

  if [ ! -d "$directory" ]; then
    echo "Error: Directory '$directory' not found."
    exit 1
  fi

  filename_without_timestamp=$(echo "$given_file" | sed -E 's/\.[0-9]{4}\.[0-9]{2}\.[0-9]{2}T[0-9]{2}\.[0-9]{2}\.[0-9]{2}//')

  for file in "$directory"/*"$filename_without_timestamp"*; do
    if [ "$file" != "$directory/$given_file" ] && [ -e "$file" ]; then
      echo "Removing existing migration file: $filename_without_timestamp"
      rm "$file"
    fi
  done
}

snake_case_to_title_case() {
  local input_string="$1"

  if [ -n "$input_string" ]; then
    local words=$(echo "$input_string" | sed 's/_/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')

    echo "$words"
  else
    echo ""
  fi
}

make_model_id() {
  if [ -z "$1" ]; then
    echo "Error: Please provide an argument."
    return 1
  fi

  if [[ "$1" == *s ]]; then
    result="${1%s}_id"
  else
    result="${1}_id"
  fi

  echo "$result"
}

is_type_exists() {
  local raw_type="$1"
  local accepted_types=("number" "integer" "string" "text" "boolean" "references")
  type_to_check=$(echo "$raw_type" | tr '[:upper:]' '[:lower:]')

  for element in "${accepted_types[@]}"; do
    if [ "$element" == "$type_to_check" ]; then
      return 0
    fi
  done

  return 1
}

is_field_type_exists() {
  local raw_field_type="$1"
  local accepted_field_types=("checkbox" "radio" "select" "input")
  field_type_to_check=$(echo "$raw_field_type" | tr '[:upper:]' '[:lower:]')

  for element in "${accepted_field_types[@]}"; do
    if [ "$element" == "$field_type_to_check" ]; then
      return 0
    fi
  done

  return 1
}

editable_files="// YOU MAY EDIT THIS FILE
"

not_editable_files="// DO NOT EDIT THIS FILE!
"